"""
Django settings for landingpage project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
from pathlib import Path
import os
from dotenv import load_dotenv
__import__('sqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('sqlite3')
    
import os
from pathlib import Path

# ANSI color codes
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RESET = '\033[0m'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"

# STATICFILES_DIRS: Directories where Django will look for additional static files.
STATICFILES_DIRS = [BASE_DIR / "Client_Side" / "static"]

# STATIC_ROOT: The directory where Django will collect all static files for deployment.
STATIC_ROOT = BASE_DIR / "collected_static/static/"

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "Client_Side" / 'media_products'

# Function to check all directories
def check_directories():
    directories = [
        ('BASE_DIR', BASE_DIR),
        ('STATIC_ROOT', STATIC_ROOT),
        ('MEDIA_ROOT', MEDIA_ROOT)
    ] + [('STATICFILES_DIR', dir) for dir in STATICFILES_DIRS]

    for name, path in directories:
        if not path.exists():
            print(f"{YELLOW}WARNING: {name} does not exist: {path}{RESET}")
        else:
            print(f"{GREEN}{name} exists: {path}{RESET}")

    if STATIC_ROOT in STATICFILES_DIRS:
        print(f"{RED}ERROR: STATIC_ROOT should not be in STATICFILES_DIRS{RESET}")

# Run the check
check_directories()

def check_static_files():
    static_files = [
        "css/style_chat.css",
        "css/style_cards.css",
        "js/landing.js",
        "js/interactions-users-messages.js"
    ]

    missing_files = []

    for file_path in static_files:
        full_path = os.path.join(STATIC_ROOT, file_path)
        if os.path.exists(full_path):
            print(f"{GREEN}File exists: {full_path}{RESET}")
        else:
            missing_files.append(file_path)

    if missing_files:
        print(f"\n{RED}The following static files are missing in the deployment directory:{RESET}")
        for file_path in missing_files:
            print(f"- {file_path}")
    else:
        print(f"\n{GREEN}All static files exist in the deployment directory.{RESET}")

# Run the check
check_static_files()

#print new line in blue
print('\033[94m' +'________________________________'+ '\033[0m')
#print in blue color Setting ENV Vars
print('\033[94m' + "Setting Environment Variables..." + '\033[0m')
# Load environment variables from .env file
ENV_PATH = BASE_DIR / '.env'
print(f"Looking for .env file at: {ENV_PATH.absolute()}")
print(f".env file exists: {ENV_PATH.exists()}")
if ENV_PATH.exists():
    print(f"Loading .env file from {ENV_PATH}")
    load_dotenv(ENV_PATH)
    print("Environment variables after loading:")
    OR = os.getenv("OPENROUTER_API_KEY")
    if OR is not None:
        print("Open Router",True)
    # print(f"PCI: {os.getenv('PCI')}")
    # print(f"PCS: {os.getenv('PCS')}")
    #print if env vars have value print true in green
    # if os.getenv('PCI'):
    #     print('\033[92m' + "Env Vars Set" + '\033[0m')

    # Print all environment variables (be careful with sensitive info)
    # print("All environment variables:")
    #for key, value in os.environ.items():
    #     print(f"{key}: {value}")

    #CHECK ENVVARS Exist
    # for key, value in os.environ.items():
    #       print('\033[92m' + (f'{key}: true' if value else f"{key}: {value}") + '\033[0m')

else:
    print(f"ERROR: .env file not found at {ENV_PATH.absolute()}")
    print("Current working directory:", os.getcwd())
    print("Contents of AI_Team directory:")
    ai_team_dir = BASE_DIR / 'AI_Team'
    if ai_team_dir.exists():
        print(list(ai_team_dir.iterdir()))
    else:
        print("AI_Team directory not found")

#print new line in blue
print('\033[94m' +'________________________________'+ '\033[0m')
#print('!!!!!!!base dir:',BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-x#@g(83fg26+c*bpz*0vepc=#eei3a&58zj3x@8z_k(2)*3n+_"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

#ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['https://efexzium.net','efexzium.net', '127.0.0.1', 'localhost', '0.0.0.0','216.172.109.33']
ALLOWED_HOSTS = ['https://efexzium.net','efexzium.net','127.0.0.1', 'localhost']

CSRF_TRUSTED_ORIGINS = ['https://efexzium.net', 'https://localhost']
# Use a secure cookie for the session
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 3600  # Puedes aumentar este valor después de probar
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# Load environment variables from .env file in AI_Team/env

# email send config
email_sender =os.environ.get('email_sender')
password_sender =os.environ.get('password_sender')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = email_sender
EMAIL_HOST_PASSWORD = password_sender

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    'django.contrib.sitemaps',
    'Server_Config.Server_Side', # path where we found it the Server config of our app
    "django_check_seo",
    'cms',
    'menus',
    'treebeard',
    'rosetta',
]

SITE_ID = 1
#"django.middleware.csrf.CsrfViewMiddleware",
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django.middleware.locale.LocaleMiddleware',
    'Server_Config.Server_Side.error_middleware.ErrorHandlingMiddleware',
     'whitenoise.middleware.WhiteNoiseMiddleware',
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR,  "locale"),
    ]

LANGUAGES = (
    ('en', _('English')),
    ('es', _('Español')),
)

ROOT_URLCONF = "Server_Config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [os.path.join(BASE_DIR, "Client_Side", "templates")], #path to templates files .html for the UI
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "Server_Config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "Server_Config/AITeam.sqlite3",
    }
}
#añade las variables de entorno a la base de datos
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': os.getenv('db_name'),
#        'USER': os.getenv('db_user'),
#        'PASSWORD': os.getenv('db_pass'),
#        'HOST': os.getenv('db_host'), 
#        'PORT': os.getenv('db_port'),
#    }
#}
MIGRATION_MODULES = {
    'Server_Side': 'Server_Config.Server_Side.migrations',
}

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 5,
        }
    }
]        

"""AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]"""


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True




# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Model User for Auth
#AUTH_USER_MODEL = 'Server_Side.CustomUser'
LOGIN_REDIRECT_URL = reverse_lazy('ai-team', kwargs={'context': 'main'})

#Paypal Configuration
#PAYPAL_RECEIVER_EMAIL = 'sb-m6xzg27588130@business.example.com' # where cash is paid into
#PAYPAL_BUY_BUTTON_IMAGE = 'https://res.cloudinary.com/the-proton-guy/image/upload/v1685882223/paypal-PhotoRoom_v9pay7.png'
PCI = os.getenv('PCI')
PCS = os.getenv('PCS')

# Stripe Configuration
STRIPE_SECRET_KEY = "sk_test_51IoDMBCJRk9RYTua3odVBYUrbIJoLxUD7i14lhDAfj11oHrBaFU57DFboN76hqS6Gbsbz5OnOOd7Ey0Z3zc8zSwA00JXlvL1sq"
STRIPE_PUBLIC_KEY = "pk_test_51IoDMBCJRk9RYTualhwP2KRwI1TivJcJEcRMVQ95XaCjCp00hVVDjkSapy6NJg7trBSn5iK4dBWwVIfuNDOS97iO00LCTnGwX9"

AUTH_USER_MODEL = 'Server_Side.Client'
